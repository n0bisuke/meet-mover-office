'use strict';

/**
 * Gemini„É°„É¢„Éï„Ç°„Ç§„É´Âêç„Åã„ÇâÊó•ÊôÇ„ÇíÊäΩÂá∫„Åô„Çã
 * „É™„Éç„Éº„É†Ââç: " 2025/06/05 00:24 JST „Å´ÈñãÂßã„Åó„Åü‰ºöË≠∞ - Gemini „Å´„Çà„Çã„É°„É¢" (Á©∫ÁôΩ„ÅÇ„Çä)
 * „É™„Éç„Éº„É†Ââç: "2025/06/05 00:24 JST „Å´ÈñãÂßã„Åó„Åü‰ºöË≠∞ - Gemini „Å´„Çà„Çã„É°„É¢" (Á©∫ÁôΩ„Å™„Åó)
 * „É™„Éç„Éº„É†Âæå: "myv-fmvs-cvs - 2025/06/05 00:24 JST „Å´ÈñãÂßã„Åó„Åü‰ºöË≠∞ - Gemini „Å´„Çà„Çã„É°„É¢"
 * ‚Üí "2025/06/05 00:24"
 * 
 * @param {string} fileName - Gemini„É°„É¢„Éï„Ç°„Ç§„É´Âêç
 * @returns {string|null} - ÊäΩÂá∫„Åï„Çå„ÅüÊó•ÊôÇÊñáÂ≠óÂàó„ÄÅÂ§±ÊïóÊôÇ„ÅØnull
 */
function extractDateTimeFromGemini(fileName) {
    // „Éï„Ç°„Ç§„É´Âêç„ÅÆÂâçÂæå„ÅÆÁ©∫ÁôΩ„Çí„Éà„É™„É†
    const trimmedName = fileName.trim();
    
    // „Éë„Çø„Éº„É≥1: „É™„Éç„Éº„É†Âæå - "meetId - YYYY/MM/DD HH:MM JST „Å´ÈñãÂßã„Åó„Åü‰ºöË≠∞ - Gemini „Å´„Çà„Çã„É°„É¢"
    const renamedPattern = /^[a-z]{3}-[a-z]{4}-[a-z]{3}\s+-\s+(\d{4}\/\d{2}\/\d{2}\s+\d{2}:\d{2})\s+JST\s+„Å´ÈñãÂßã„Åó„Åü‰ºöË≠∞\s+-\s+Gemini\s+„Å´„Çà„Çã„É°„É¢$/;
    
    let match = trimmedName.match(renamedPattern);
    if (match) {
        // console.log(`üîÑ Found renamed Gemini pattern: ${match[1]}`);
        return match[1]; // Êó•ÊôÇÈÉ®ÂàÜ„ÅÆ„ÅøËøî„Åô
    }
    
    // „Éë„Çø„Éº„É≥2: „É™„Éç„Éº„É†Ââç (Á©∫ÁôΩ„Å™„Åó) - "YYYY/MM/DD HH:MM JST „Å´ÈñãÂßã„Åó„Åü‰ºöË≠∞ - Gemini „Å´„Çà„Çã„É°„É¢"
    const originalPatternNoSpace = /^(\d{4}\/\d{2}\/\d{2}\s+\d{2}:\d{2})\s+JST\s+„Å´ÈñãÂßã„Åó„Åü‰ºöË≠∞\s+-\s+Gemini\s+„Å´„Çà„Çã„É°„É¢$/;
    
    match = trimmedName.match(originalPatternNoSpace);
    if (match) {
        // console.log(`üìÖ Found original Gemini pattern (no leading space): ${match[1]}`);
        return match[1]; // Êó•ÊôÇÈÉ®ÂàÜ„ÅÆ„ÅøËøî„Åô
    }
    
    // console.log(`‚ùå No Gemini pattern matched for: "${trimmedName}"`);
    // console.log(`üîç Patterns tried:`);
    // console.log(`  1. Renamed: [a-z]{3}-[a-z]{4}-[a-z]{3} - YYYY/MM/DD...`);
    // console.log(`  2. Original: YYYY/MM/DD HH:MM JST...`);
    return null;
}

/**
 * ÂãïÁîª„Éï„Ç°„Ç§„É´Âêç„Åã„ÇâÊó•ÊôÇ„ÇíÊäΩÂá∫„Åô„Çã
 * "myv-fmvs-cvs (2025-06-05 00:24 GMT+9)" ‚Üí "2025-06-05 00:24"
 * 
 * @param {string} fileName - ÂãïÁîª„Éï„Ç°„Ç§„É´Âêç
 * @returns {string|null} - ÊäΩÂá∫„Åï„Çå„ÅüÊó•ÊôÇÊñáÂ≠óÂàó„ÄÅÂ§±ÊïóÊôÇ„ÅØnull
 */
function extractDateTimeFromVideo(fileName) {
    // „Éë„Çø„Éº„É≥: xxx-xxxx-xxx (YYYY-MM-DD HH:MM GMT+9)
    const videoPattern = /\((\d{4}-\d{2}-\d{2}\s+\d{2}:\d{2})\s+GMT\+9\)/;
    
    const match = fileName.match(videoPattern);
    if (match) {
        return match[1]; // Êó•ÊôÇÈÉ®ÂàÜ„ÅÆ„ÅøËøî„Åô
    }
    
    return null;
}

/**
 * ÂãïÁîª„Éï„Ç°„Ç§„É´Âêç„Åã„ÇâMeet ID„ÇíÊäΩÂá∫„Åô„Çã
 * "myv-fmvs-cvs (2025-06-05 00:24 GMT+9)" ‚Üí "myv-fmvs-cvs"
 * 
 * @param {string} fileName - ÂãïÁîª„Éï„Ç°„Ç§„É´Âêç
 * @returns {string|null} - ÊäΩÂá∫„Åï„Çå„ÅüMeet ID„ÄÅÂ§±ÊïóÊôÇ„ÅØnull
 */
function extractMeetIdFromVideo(fileName) {
    // „Éë„Çø„Éº„É≥: xxx-xxxx-xxx (YYYY-MM-DD HH:MM GMT+9)
    const meetIdPattern = /^([a-z]{3}-[a-z]{4}-[a-z]{3})\s+\(/;
    
    const match = fileName.match(meetIdPattern);
    if (match) {
        return match[1]; // Meet IDÈÉ®ÂàÜ„ÅÆ„ÅøËøî„Åô
    }
    
    return null;
}

/**
 * Êó•ÊôÇÊñáÂ≠óÂàó„ÇíÊ≠£Ë¶èÂåñ„Åô„ÇãÔºàÊØîËºÉÁî®Ôºâ
 * "2025/06/05 00:24" ‚Üí "2025-06-05 00:24"
 * "2025-06-05 00:24" ‚Üí "2025-06-05 00:24"
 * 
 * @param {string} dateTimeStr - Êó•ÊôÇÊñáÂ≠óÂàó
 * @returns {string} - Ê≠£Ë¶èÂåñ„Åï„Çå„ÅüÊó•ÊôÇÊñáÂ≠óÂàó
 */
function normalizeDateTimeString(dateTimeStr) {
    if (!dateTimeStr) return '';
    
    // „Çπ„É©„ÉÉ„Ç∑„É•„Çí„Éè„Ç§„Éï„É≥„Å´Â§âÊèõ
    return dateTimeStr.replace(/\//g, '-');
}

/**
 * Gemini„Éï„Ç°„Ç§„É´Âêç„Åã„ÇâÂØæÂøú„Åô„Çã‰ºöË≠∞„ÅÆMeet ID„ÇíÊ§úÁ¥¢„Åô„Çã
 * 
 * @param {string} geminiFileName - Gemini„É°„É¢„Éï„Ç°„Ç§„É´Âêç
 * @param {Array} fileList - Google Drive„ÅÆ„Éï„Ç°„Ç§„É´‰∏ÄË¶ßÔºàkind, id, name, mimeType, meetId„Éó„É≠„Éë„ÉÜ„Ç£„ÇíÊåÅ„Å§„Ç™„Éñ„Ç∏„Çß„ÇØ„Éà„ÅÆÈÖçÂàóÔºâ
 * @returns {object} - Ê§úÁ¥¢ÁµêÊûú
 */
function findMeetIdFromGemini(geminiFileName, fileList) {
    const result = {
        success: false,
        meetId: null,
        matchedVideoFile: null,
        matchedVideoFileId: null,
        geminiDateTime: null,
        error: null
    };
    
    // console.log(`üîç Searching Meet ID for Gemini file: ${geminiFileName}`);
    
    // Gemini„Éï„Ç°„Ç§„É´„Åã„ÇâÊó•ÊôÇ„ÇíÊäΩÂá∫
    const geminiDateTime = extractDateTimeFromGemini(geminiFileName);
    if (!geminiDateTime) {
        result.error = 'Failed to extract datetime from Gemini filename';
        // console.log(`‚ùå ${result.error}`);
        return result;
    }
    
    result.geminiDateTime = geminiDateTime;
    const normalizedGeminiDateTime = normalizeDateTimeString(geminiDateTime);
    // console.log(`üìÖ Extracted datetime from Gemini: ${geminiDateTime} ‚Üí ${normalizedGeminiDateTime}`);
    
    // ÂãïÁîª„Éï„Ç°„Ç§„É´„ÅÆ‰∏≠„Åã„ÇâÂêå„ÅòÊó•ÊôÇ„ÅÆ„Éï„Ç°„Ç§„É´„ÇíÊ§úÁ¥¢
    const videoFiles = fileList.filter(file => file.mimeType === 'video/mp4');
    // console.log(`üé• Searching among ${videoFiles.length} video files`);
    
    for (const videoFile of videoFiles) {
        const videoDateTime = extractDateTimeFromVideo(videoFile.name);
        if (!videoDateTime) {
            // console.log(`‚è≠Ô∏è  Skipping video file (no datetime): ${videoFile.name}`);
            continue;
        }
        
        const normalizedVideoDateTime = normalizeDateTimeString(videoDateTime);
        // console.log(`üîç Comparing: ${normalizedGeminiDateTime} vs ${normalizedVideoDateTime}`);
        
        if (normalizedGeminiDateTime === normalizedVideoDateTime) {
            const meetId = extractMeetIdFromVideo(videoFile.name);
            if (meetId) {
                result.success = true;
                result.meetId = meetId;
                result.matchedVideoFile = videoFile.name;
                result.matchedVideoFileId = videoFile.id;
                // console.log(`‚úÖ Found matching Meet ID: ${meetId} from video: ${videoFile.name}`);
                return result;
            } else {
                // console.log(`‚ö†Ô∏è  Found matching datetime but no Meet ID in: ${videoFile.name}`);
            }
        }
    }
    
    result.error = 'No matching video file found for the Gemini datetime';
    // console.log(`‚ùå ${result.error}`);
    return result;
}

/**
 * „Éï„Ç°„Ç§„É´„É™„Çπ„Éà„Åã„ÇâGemini-Meet ID„ÅÆ„Éû„ÉÉ„Éî„É≥„Ç∞„Çí‰ΩúÊàê„Åô„Çã
 * 
 * @param {Array} fileList - Google Drive„ÅÆ„Éï„Ç°„Ç§„É´‰∏ÄË¶ßÔºàkind, id, name, mimeType, meetId„Éó„É≠„Éë„ÉÜ„Ç£„ÇíÊåÅ„Å§„Ç™„Éñ„Ç∏„Çß„ÇØ„Éà„ÅÆÈÖçÂàóÔºâ
 * @returns {Array} - Gemini„Éï„Ç°„Ç§„É´„Å®ÂØæÂøú„Åô„ÇãMeet ID„ÅÆ„Éû„ÉÉ„Éî„É≥„Ç∞
 */
function createGeminiMeetIdMapping(fileList) {
    // console.log(`üó∫Ô∏è  Creating Gemini-Meet ID mapping from ${fileList.length} files`);
    
    const mappings = [];
    
    // Gemini„Éï„Ç°„Ç§„É´„ÇíÊ§úÁ¥¢
    const geminiFiles = fileList.filter(file => {
        const trimmedName = file.name.trim();
        return file.mimeType === 'application/vnd.google-apps.document' &&
               trimmedName.includes('Gemini „Å´„Çà„Çã„É°„É¢') && 
               trimmedName.includes('JST „Å´ÈñãÂßã„Åó„Åü‰ºöË≠∞');
    });
    
    // console.log(`ü§ñ Found ${geminiFiles.length} Gemini files`);
    
    geminiFiles.forEach(geminiFile => {
        const result = findMeetIdFromGemini(geminiFile.name, fileList);
        
        mappings.push({
            geminiFile: geminiFile.name,
            geminiFileId: geminiFile.id,
            geminiMimeType: geminiFile.mimeType,
            meetId: result.meetId,
            matchedVideoFile: result.matchedVideoFile,
            matchedVideoFileId: result.matchedVideoFileId,
            success: result.success,
            error: result.error,
            geminiDateTime: result.geminiDateTime
        });
    });
    
    // console.log(`üìä Created ${mappings.length} mappings`);
    // mappings.forEach(mapping => {
    //     if (mapping.success) {
    //         console.log(`‚úÖ ${mapping.geminiFile.trim()} ‚Üí ${mapping.meetId}`);
    //     } else {
    //         console.log(`‚ùå ${mapping.geminiFile.trim()} ‚Üí ${mapping.error}`);
    //     }
    // });
    
    return mappings;
}

module.exports = {
    extractDateTimeFromGemini,
    extractDateTimeFromVideo,
    extractMeetIdFromVideo,
    findMeetIdFromGemini,
    createGeminiMeetIdMapping
};
